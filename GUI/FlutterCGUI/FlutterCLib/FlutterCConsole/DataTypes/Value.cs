//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан инструментальным средством
//     В случае повторного создания кода изменения, внесенные в этот файл, будут потеряны.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using FlutterCConsole.Exceptions;

public class Value
{
    public int address;
    public int rank;
    public int size;

    public Dictionary<string, Value> fields;

    public int getRank(string s){
        if(s[s.Length - 1]=='*'){
            return 100500;
        }
        else
        {
            if(s == "char"){
                return 1;
            }

            if (s == "int")
            {
                return 2;
            }

            if (s == "long")
            {
                return 3;
            }

            if (s == "float")
            {
                return 4;
            }

            if (s == "double")
            {
                return 5;
            }

            throw new TypeException();
        }
    }

    public void allocate()
    {
        Memory.getInstance().allocateVariable(this);
    }



    public bool isStructure()
    {
        if(!this.isPointer()){
            if(this.typetoken[0] == '$'){
                return true;
            }
        }
        return false;
    }

    public string getStructureType()
    {
        return this.typetoken.Substring(1);
    }

    public Value getField(string name)
    {
        if(this.isStructure()){
            if(fields == null){
                throw new TypeException();
            }
            else
            {
                if(fields.ContainsKey(name)){
                    return fields[name];
                }
                else
                {
                    throw new TypeException();
                }
            }
        }
        else
        {
            throw new TypeException();
        }
    }

    public Value(decimal beginValue, string typetoken, int address)
    {
        this.typetoken = typetoken;
        this.value = beginValue;
        this.address = address;
        Memory.getInstance().cellMemory.setValue(address, this);
        initStructureFields();
    }

    public void initStructureFields()
    {
        if (this.isStructure())
        {
            fields = new Dictionary<string, Value>();
            FlutterCConsole.StructureDeclaration description = Memory.instance.availableStructs[getStructureType()];
            for (int i = 0; i < description.names.Count; i++)
            {
                Value val = new Value(description.typetokens[i], true);
                fields.Add(description.names[i], val);
            }
        }
    }

    public Value() { }

    public Value(string typetoken, bool alloc)
    {
        if(alloc){
            allocate();
        }
        this.typetoken = typetoken;

        initStructureFields();
    }

    public override string ToString()
    {
        if (typetoken == null)
        {
            return this.value+"";
        }

        if(this.typetoken == "char"){
            return (char)this.value+"";
        }

        if (this.typetoken == "int")
        {
            return (int)this.value+"";
        }

        if (this.typetoken == "long")
        {
            return (long)this.value + "";
        }

        if (this.typetoken == "double")
        {
            return (double)this.value +"";
        }

        if (this.typetoken == "float")
        {
            return(float)this.value + "";
        }

        if (this.isPointer())
        {
            if(this.typetoken == "char*"){
                return FlutterCConsole.Utils.getStringByAddress((int)this.value);
            }
            else
            {
                int address = (int)this.value;
                if (Memory.instance.cellMemory.sizes[address] == 1)
                {
                    return (int)this.value + "";
                }
                else{
                    int sz = Memory.instance.cellMemory.sizes[address];
                    string s = "{";
                    for (int i = 0; i < sz; i++ )
                    {
                        Value v = Memory.instance.cellMemory.getValue(address + i);

                        if(i!=sz - 1){
                            s += v.ToString() + " ";
                        }
                        else
                        {
                            s += v.ToString();
                        }
                    }
                    s+="}";
                    return s;
                }
            }
        }

        if(this.isStructure()){
            string s = "[ ";
            foreach(var i in fields){
                s += i.Key + "=" + i.Value + " ";
            }
            s += "]";
            return s;
        }

        return this.typetoken + " " + (int)this.value + "(" + this.address + ")";
    }

    public decimal value;
    public string typetoken;

    public void operatorPlus(Value a)
    {
        this.value += a.value;
    }
    public void operatorMinus(Value a)
    {
        this.value -= a.value;
    }

    public void castTo(string type)
    {
        this.typetoken = type;
        crop();
    }

    public void setField(string name, Value value)
    {
        this.fields[name] = value;
    }

    public Value implicitCast(string type)
    {
        if(this.isStructure()){
            if(type == this.typetoken){
                return this;
            }
        }

        if(getRank(typetoken) > getRank(type)){
            throw new TypeException();
        }
        Value res = new Value(type, false);
        res.value = this.value;
        res.crop();
        return res;
    }

    public Value explicitCast(string type)
    {
        if (this.isPointer())
        {
            int size = Memory.instance.cellMemory.sizes[(int)this.value];
            Value pointer = new Value(type, true);

            
            pointer.value = this.value;
            pointer.size = size;

            if (type[0] != '$')
            {
                for (int i = 0; i < size; i++)
                {
                    Value oldValue = Memory.instance.cellMemory.getValue((int)this.value + i);
                    string t = type.Substring(0, type.Length - 1);
                    //Memory.instance.cellMemory.setValue((int)this.value + i, oldValue.explicitCast(type.Substring(0, type.Length - 1)));
                    oldValue = oldValue.explicitCast(t);
                    Memory.instance.cellMemory.memoryMap[(int)this.value + i] = oldValue;
                }
            }
            else
            {
                Memory.getInstance().cellMemory.malloc(pointer, size);
                for (int i = 0; i < size; i++)
                {
                    Value oldValue = Memory.instance.cellMemory.getValue((int)this.value + i);
                    Value newValue = Memory.instance.cellMemory.getValue((int)pointer.value + i);
                    newValue.value = oldValue.value;
                }
            }

            return pointer;
        }
        else
        {
            if(this.isStructure()){
                if(this.typetoken == type){
                    return this.makeCopy();
                }
                else
                {
                    throw new TypeException();
                }
            }
            Value res = new Value(type, false);
            res.value = this.value;
            res.crop();
            return res;
        }
    }

    public bool isPointer()
    {
        if (typetoken[typetoken.Length - 1] == '*')
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public void crop()
    {
        if (typetoken == "int" || typetoken[typetoken.Length - 1] == '*')
        {
            this.value = (decimal)((int)value);
        }

        if (typetoken == "long")
        {
            this.value = (decimal)((long)value);
        }

        if (typetoken == "char")
        {
            this.value = (decimal)((char)value);
        }

        if (typetoken == "float")
        {
            this.value = (decimal)((float)value);
        }

        if (typetoken == "double")
        {
            this.value = (decimal)((double)value);
        }
    }

    public void operatorDivide(Value a)
    {
        this.value /= a.value;
    }
    public void operatorMult(Value a)
    {
        this.value *= a.value;
    }
    public void operatorTilda()
    {
        integerCheck();
        this.value = ~(long)value;
    }

    public Value operatorMore(Value a)
    {
        Value res = new Value("char", false);
        if (this.value > a.value)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }

    public Value operatorLess(Value a)
    {
        Value res = new Value("char", false);
        if (this.value < a.value)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }

    public Value operatorMoreEqual(Value a)
    {
        Value res = new Value("char", false);
        if (this.value >= a.value)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }

    public Value operatorLessEqual(Value a)
    {
        Value res = new Value("char", false);
        if (this.value <= a.value)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }

    public Value operatorNonEqual(Value a)
    {
        Value res = new Value("char", false);
        if (this.value != a.value)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }

    public Value operatorEqual(Value a)
    {
        Value res = new Value("char", false);
        if (this.value == a.value)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }


    public Value operatorLogicalOr(Value a)
    {
        Value res = new Value("char", false);
        if (this.value != 0 || a.value != 0)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }

    public void operatorLogicalNot()
    {
        if (this.value != 0)
        {
            value = 0;
        }
        else
        {
            value = 1;
        }
    }


    public Value operatorLogicalAnd(Value a)
    {
        Value res = new Value("char", false);
        if (this.value != 0 && a.value != 0)
        {
            res.value = 1;
        }
        else
        {
            res.value = 0;
        }
        return res;
    }

    public virtual Value makeCopy()
    {
        if (this.isStructure())
        {
            Value res = new Value(this.typetoken, false);
            foreach(var i in fields){
                res.setField(i.Key, i.Value.makeCopy());
            }
            res.value = this.value;
            return res;
        }
        else
        {
            Value res = new Value(this.typetoken, false);
            res.value = this.value;
            return res;
        }
    }

    public void copyFrom(Value b)
    {
        if(!this.isStructure()){
            this.value = b.value;
        }
        else
        {
            if(b.typetoken==this.typetoken){
                foreach (var i in b.fields){
                    this.setField(i.Key, i.Value.makeCopy());
                }
                this.value = b.value;
            }
            else
            {
                throw new TypeException();
            }
        }
    }


    public Value operatorAmpersand()
    {
        Value pointer = new Value(this.typetoken+"*", false);
        pointer.set(this);
        return pointer;
    }


    public string getValueToken()
    {
        if(this.isPointer()){
            return this.typetoken.Substring(0, this.typetoken.Length - 1);
        }
        else{
            throw new TypeException();
        }
    }


    public Value operatorAsterix()
    {
        if (value == 0)
        {
            throw new FlutterCConsole.Exceptions.NullPointerAccess();
        }
        if (Memory.getInstance().cellMemory.isUsed((int)this.value))
        {
            Value val = Memory.getInstance().cellMemory.getValue((int)this.value);
            val.implicitCast(getValueToken());
            return val;
        }
        else
        {
            throw new FlutterCConsole.Exceptions.AccessViolationException((int)this.value);
        }
    }


    public void set(Value value)
    {
        this.value = value.address;
        this.size = 1;
    }

    public void set(int size, decimal[] array)
    {
        this.size = size;
        Memory.getInstance().cellMemory.allocatePointer(this, array);
    }

    public bool isInteger()
    {
        return typetoken == "int" || typetoken == "char" || typetoken == "long";
    }

    public void integerCheck()
    {
        if(!isInteger()){
            throw new TypeException();
        }
    }


    public void operatorMod(Value a)
    {
        integerCheck();
        this.value %= (long)a.value;
    }

    public void operatorLeftShift(Value a)
    {
        integerCheck();
        this.value = (decimal)((long)this.value << (int)a.value);
    }

    public void operatorRightShift(Value a)
    {
        integerCheck();
        this.value = (decimal)((long)this.value >> (int)a.value);
    }

    public void operatorBitwiseXor(Value a)
    {
        integerCheck();
        this.value = (decimal)((long)this.value ^ (long)a.value);
    }

    public void operatorBitwiseAnd(Value a)
    {
        integerCheck();
        this.value = (decimal)((long)this.value & (long)a.value);
    }

    public void operatorBitwiseOr(Value a)
    {
        integerCheck();
        this.value = (decimal)((long)this.value | (long)a.value);
    }
}


//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан инструментальным средством
//     В случае повторного создания кода изменения, внесенные в этот файл, будут потеряны.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using FlutterCConsole;

public abstract class Node
{
    public string name;
    public string tag;

    public List<string> instruction;
    public string functionName;

    public void setInstruction(List<string> s)
    {
        this.instruction = s;
    }

    public void setFunctionName(string s)
    {
        this.functionName = s;
    }

    public string type()
    {
        return this.GetType().ToString();
    }

    public virtual void execute() {
        Memory.getInstance().nodeExecuted(this);
    }

    public virtual string print(int o) {
        return new string(' ', o)+tag;
    }

    public Dictionary<String, Variable> getNonGlobalVariables()
    {
        List<string> res = new List<string>();
        Dictionary<String, Variable> map = new Dictionary<string, Variable>();
        List<Variable> allVars = Memory.getInstance().getAllVariables();

        LinearNode glob = Memory.getInstance().globalNode;

        for (int i = 0; i < allVars.Count; i++)
        {
            string longname = allVars[i].longname;
            string shortName = Utils.getVarName(longname);
            string nodeName = Utils.getNodeName(longname);

            if (Utils.isPrefix(nodeName, name))
            {
                map[shortName] = allVars[i];
            }
        }
        return map;
    }

    public Dictionary<String, Variable> getVariables(){
        List<string> res = new List<string>();
        Dictionary<String, Variable> map = new Dictionary<string, Variable>();
        List<Variable> allVars = Memory.getInstance().getAllVariables();

        LinearNode glob = Memory.getInstance().globalNode;



        for (int i = 0; i < allVars.Count; i++ )
        {
            string longname = allVars[i].longname;
            string shortName = Utils.getVarName(longname);
            string nodeName = Utils.getNodeName(longname);

            if(Utils.isPrefix(nodeName, name)){
                map[shortName] = allVars[i];
            }

            if ("$linear1"+"$"+shortName==longname)
            {
                map[shortName] = allVars[i];
            }
        }
        return map;
    }

    public Dictionary<String, Variable> getFunctionVariables()
    {
        Dictionary<String, Variable> map = new Dictionary<string, Variable>();
        List<Variable> allVars = Memory.getInstance().getAllVariables();

        LinearNode glob = Memory.getInstance().globalNode;

        for (int i = 0; i < allVars.Count; i++)
        {
            string longname = allVars[i].longname;
            string shortName = Utils.getVarName(longname);
            string nodeName = Utils.getNodeName(longname);

            if (Utils.isPrefix(name, nodeName))
            {
                map[shortName] = allVars[i];
            }

            if ("$linear1" + "$" + shortName == longname)
            {
                map[shortName] = allVars[i];
            }
        }
        return map;
    }

}



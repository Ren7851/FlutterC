//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан инструментальным средством
//     В случае повторного создания кода изменения, внесенные в этот файл, будут потеряны.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using FlutterCConsole;

public class LinearNode : Node
{
    private LinkedList<Node> sequence;

    public LinearNode() 
    {
        sequence = new LinkedList<Node>();
        this.name = "";
    }

    public List<Node> getNodes()
    {
        List<Node> res = new List<Node>();
        foreach (var item in sequence)
        {
            res.Add(item);
        }
        return res;
    }

    public LinearNode(Node host) {
        sequence = new LinkedList<Node>();
        this.name = host.name + "$" + NameInventor.makeBlockName("l");
    }

    public void addNode(Node node) {
        sequence.AddLast(node);
    }

    public override void execute()
    {
        foreach (var item in sequence)
        {
            if (item is Off)
            {
                if (item is ReturnOff)
                {
                    Memory.getInstance().functionReturnFlag = false;
                    continue;
                }

                if (item is BreakOff)
                {
                    if (((BreakOff)item).index == Memory.instance.breakIndex)
                    {
                        Memory.getInstance().breakFlag = false;
                    }
                    continue;
                }

                if (item is ContinueOff)
                {
                    if (((ContinueOff)item).index == Memory.instance.continueIndex)
                    {
                        Memory.getInstance().continueFlag = false;
                    }
                    continue;
                }
            }

            bool f1 = Memory.instance.functionReturnFlag;
            bool f2 = Memory.getInstance().breakFlag;
            bool f3 = Memory.getInstance().continueFlag;
            if (!(f1 || f2 || f3))
            {
                item.execute();
            }
        }
    }

    public override string ToString()
    {
        return print(0);
    }

    public override string print(int o)
    {
        string res = new string(' ', o) + name;

        if (sequence.Count > 0)
        {
            res += "\n";
        }

        foreach (var item in sequence){
            res += item.print(o + Settings.OFFSET)+"\n";
            /*
            if (i != sequence.Count - 1)
            {
                res += sequence[i].print(o + Settings.OFFSET) + "\n";
            }
            else {
                res += sequence[i].print(o + Settings.OFFSET);
            }
             * */
        }
        return res;
    }
}

